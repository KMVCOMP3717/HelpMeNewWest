package set3r.kmv.ca.helpmenewwest.database.schema;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMUNITY".
*/
public class CommunityDao extends AbstractDao<Community, Long> {

    public static final String TABLENAME = "COMMUNITY";

    /**
     * Properties of entity Community.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Hours = new Property(3, String.class, "hours", false, "HOURS");
        public final static Property Location = new Property(4, String.class, "location", false, "LOCATION");
        public final static Property Postal_code = new Property(5, String.class, "postal_code", false, "POSTAL_CODE");
        public final static Property Phone = new Property(6, Long.class, "phone", false, "PHONE");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Website = new Property(8, String.class, "website", false, "WEBSITE");
        public final static Property Category_id = new Property(9, long.class, "category_id", false, "CATEGORY_ID");
    }


    public CommunityDao(DaoConfig config) {
        super(config);
    }
    
    public CommunityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMUNITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"HOURS\" TEXT," + // 3: hours
                "\"LOCATION\" TEXT," + // 4: location
                "\"POSTAL_CODE\" TEXT," + // 5: postal_code
                "\"PHONE\" INTEGER," + // 6: phone
                "\"EMAIL\" TEXT," + // 7: email
                "\"WEBSITE\" TEXT," + // 8: website
                "\"CATEGORY_ID\" INTEGER NOT NULL );"); // 9: category_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMUNITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Community entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String hours = entity.getHours();
        if (hours != null) {
            stmt.bindString(4, hours);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String postal_code = entity.getPostal_code();
        if (postal_code != null) {
            stmt.bindString(6, postal_code);
        }
 
        Long phone = entity.getPhone();
        if (phone != null) {
            stmt.bindLong(7, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(9, website);
        }
        stmt.bindLong(10, entity.getCategory_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Community entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String hours = entity.getHours();
        if (hours != null) {
            stmt.bindString(4, hours);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String postal_code = entity.getPostal_code();
        if (postal_code != null) {
            stmt.bindString(6, postal_code);
        }
 
        Long phone = entity.getPhone();
        if (phone != null) {
            stmt.bindLong(7, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(9, website);
        }
        stmt.bindLong(10, entity.getCategory_id());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Community readEntity(Cursor cursor, int offset) {
        Community entity = new Community( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hours
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // location
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // postal_code
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // phone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // website
            cursor.getLong(offset + 9) // category_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Community entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHours(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPostal_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWebsite(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCategory_id(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Community entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Community entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Community entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
